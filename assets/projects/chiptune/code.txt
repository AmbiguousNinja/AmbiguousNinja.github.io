#include <tones.h>

#define NODE_1 12
#define NODE_2 11
#define NODE_3 10
#define NODE_4 9

int SPEAKER = 5;    // The speaker is on pin 5

// The notes/rests of the song.
int notes[] = {FS5,REST,FS5,REST,FS5,REST,FS5,REST,GS5,B5,CS6,B5,GS5,FS5,GS5,FS5,E5,E5,CS5,E5,FS5,GS5,GS5,FS5,E5,FS5,
               FS5,B5,CS6,E6,CS6,FS6,GS5,B5,CS6,B5,GS5,FS5,GS5,FS5,E5,E5,CS5,E5,FS5,GS5,B5,GS5,FS5,E5,
               E5,FS5,E5,CS5,B4,E5,E4,E4,E4,CS4,E4,E4,E4,FS4,E4,E4,E4,CS4,E4,E4,E4,GS4,E4,B3,CS4,B3,CS4,E4,
               FS4,GS4,FS4,E4,FS4,B4,CS5,E5,E4,E4,E4,CS4,E4,E4,E4,E4,FS4,E4,E4,E4,E4,CS4,E4,E4,E4,E4,GS4,E4,B3,CS4,E4,FS4,GS4,FS4,E4,
               E4,FS5,E5,CS5,B4,E5,REST,E5,E5,CS5,E5,E5,E5,E5,E5,E5,E5,E5,FS5,E5,CS5,B4,CS5,E5,B5,CS6,E6,REST,E5,
               FS5,GS5,E6,FS6,GS6,REST,E5,E5,CS5,E5,E5,E5,E5,E5,E5,E5,FS5,E5,CS5,E5,FS5,FS5,E5,FS5,FS5,E5,
              };

// Duration of each note (relative to a sixteenth note)
int durations[] = {2,2,2,2,2,2,2,2,2,2,4,6,2,2,2,2,2,8,2,2,2,2,2,2,2,2,
                   2,1,1,2,2,8,2,2,4,6,2,2,2,2,2,8,2,2,2,2,2,2,2,2,
                   4,1,1,1,1,6,1,1,2,1,3,2,2,1,3,2,2,1,3,2,2,1,3,2,4,4,4,4,
                   2,2,2,2,2,1,1,2,1,1,2,1,3,1,1,2,1,3,1,1,2,1,3,1,1,2,1,3,2,4,4,2,2,2,2,
                   4,1,1,1,1,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,2,2,2,2,2,
                   2,8,2,2,2,2,2,2,2,4,2,2,2,2,2,2,2,2,2,2,2,4,2,2,4,2
                  };

int song_length = sizeof(notes) / sizeof(int);

int tempo = 125; // Duration of a sixteenth note in milliseconds

void setup()
{
  pinMode(SPEAKER, OUTPUT);

  pinMode(NODE_1, INPUT);
  pinMode(NODE_2, INPUT);
  pinMode(NODE_3, INPUT);
  pinMode(NODE_4, INPUT);
}

void loop()
{
  for (int i = 0; i < song_length; i++)
  {
    if (notes[i] == 0)
    {
      // Play nothing if there is a rest
      noTone(SPEAKER);
      delay(durations[i]*tempo);
    }
    else
    {
      light_up(to_lights(notes[i]));
      tone(SPEAKER,notes[i]);
      delay(durations[i]*tempo);
      noTone(SPEAKER);
      delay(10);
    }
  }
}

// Selects LED to turn on
void set_pins(int high, int low)
{
  reset_pins();

  pinMode(high, OUTPUT);
  pinMode(low, OUTPUT);

  digitalWrite(high, HIGH);
  digitalWrite(low, LOW);
}

void reset_pins()
{
  pinMode(NODE_1, INPUT);
  pinMode(NODE_2, INPUT);
  pinMode(NODE_3, INPUT);
  pinMode(NODE_4, INPUT);

  digitalWrite(NODE_1, LOW);
  digitalWrite(NODE_2, LOW);
  digitalWrite(NODE_3, LOW);
  digitalWrite(NODE_4, LOW);
}

// Returns the LED to turn on given a note (frequency)
int to_lights(int note)
{
  int c[]   = {C0,C1,C2,C3,C4,C5,C6,C7,C8};
  int cs[]  = {CS0,CS1,CS2,CS3,CS4,CS5,CS6,CS7,CS8};
  int d[]   = {D0,D1,D2,D3,D4,D5,D6,D7,D8};
  int ds[]  = {DS0,DS1,DS2,DS3,DS4,DS5,DS6,DS7,DS8};
  int e[]   = {E0,E1,E2,E3,E4,E5,E6,E7,E8};
  int f[]   = {F0,F1,F2,F3,F4,F5,F6,F7,F8};
  int fs[]  = {FS0,FS1,FS2,FS3,FS4,FS5,FS6,FS7,FS8};
  int g[]   = {G0,G1,G2,G3,G4,G5,G6,G7,G8};
  int gs[]  = {GS0,G1,GS2,GS3,GS4,GS5,GS6,GS7,GS8};
  int a[]   = {AN0,AN1,AN2,AN3,AN4,AN5,AN6,AN7,AN8};
  int as[]  = {AS0,AS1,AS2,AS3,AS4,AS5,AS6,AS7,AS8};
  int b[]   = {B0,B1,B2,B3,B4,B5,B6,B7,B8};

  if(in_array(note, c))
  {
    return 1;
  }

  else if(in_array(note, cs))
  {
    return 2;
  }

  else if(in_array(note, d))
  {
    return 3;
  }

  else if(in_array(note, ds))
  {
    return 4;
  }

  else if(in_array(note, e))
  {
    return 5;
  }

  else if(in_array(note, f))
  {
    return 6;
  }

  else if(in_array(note, fs))
  {
    return 7;
  }

  else if(in_array(note, g))
  {
    return 8;
  }

  else if(in_array(note, gs))
  {
    return 9;
  }

  else if(in_array(note, a))
  {
    return 10;
  }

  else if(in_array(note, as))
  {
    return 11;
  }

  else if(in_array(note, b))
  {
    return 12;
  }
}

// Checks if a value exists in an array
int in_array(int value, int array[8])
{
  for (int i; i <= 8; i++)
  {
    if(array[i] == value)
    {
      return 1;
    }
  }
  return 0;
}

// Turns on an LED
void light_up(int number)
{
  switch(number)
  {
    case 1:
      set_pins(NODE_1, NODE_2);
      break;

    case 2:
      set_pins(NODE_2, NODE_1);
      break;

    case 3:
      set_pins(NODE_1, NODE_3);
      break;

    case 4:
      set_pins(NODE_3, NODE_1);
      break;

    case 5:
      set_pins(NODE_1, NODE_4);
      break;

    case 6:
      set_pins(NODE_4, NODE_1);
      break;

    case 7:
      set_pins(NODE_2, NODE_3);
      break;

    case 8:
      set_pins(NODE_3, NODE_2);
      break;

    case 9:
      set_pins(NODE_2, NODE_4);
      break;

    case 10:
      set_pins(NODE_4, NODE_2);
      break;

    case 11:
      set_pins(NODE_3, NODE_4);
      break;

    case 12:
      set_pins(NODE_4, NODE_3);
      break;
  }
}
